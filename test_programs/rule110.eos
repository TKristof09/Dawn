let board: i64[60]; // 2*30
let board_size: i64 = 30;

let k: i64 = 0;
while k < board_size
{
    board[k] = 0;
    board[k + board_size] = 0;

    k = k + 1;
};

let i: i64 = 0;
let j: i64 = 1;
let curr_board: i64 = 0;

board[0] = 1;
board[29] = 1;
board[30] = 1;
board[59] = 1;

let a:i64;
let b:i64;
let c:i64;

let patterns: i64[8];
patterns[0] = 0;
patterns[1] = 1;
patterns[2] = 1;
patterns[3] = 1;
patterns[4] = 0;
patterns[5] = 1;
patterns[6] = 1;
patterns[7] = 0;

let lookup: i64;
let next_board: i64;
while i < board_size
{
    j = 0;
    while j < 30
    {
        print(board[curr_board * board_size + j]);

        j = j + 1;
    };
    j = 1;
    next_board = 1 - curr_board;
    while j < (board_size - 1)
    {
        a = board[curr_board * board_size + j - 1];
        b = board[curr_board * board_size + j];
        c = board[curr_board * board_size + j + 1];
        lookup = (a << 2) | (b << 1) | c;
        lookup = lookup & 7;

        board[next_board * board_size + j] = patterns[lookup];

        j = j + 1;
    };
    curr_board = next_board;
    i = i + 1;
};
