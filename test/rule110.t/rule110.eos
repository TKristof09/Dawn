let board_size: int = 30;
let board: int[60]; // 2*30

let k: int = 0;
while(k < board_size)
{
    if(k == 0 || k == board_size - 1)
    {
        board[k] = 1;
        board[k + board_size] = 1;
    }
    else{
        board[k] = 0;
        board[k + board_size] = 0;
    }

    k = k + 1;
}

let i: int = 0;
let j: int = 1;
let curr_board: int = 0;

let a:int;
let b:int;
let c:int;

let patterns: int[8];
patterns[0] = 0;
patterns[1] = 1;
patterns[2] = 1;
patterns[3] = 1;
patterns[4] = 0;
patterns[5] = 1;
patterns[6] = 1;
patterns[7] = 0;

let lookup: int;
let next_board: int;
while(i < board_size)
{
    j = 0;
    while(j < board_size)
    {
        if(board[curr_board * board_size + j] == 0) {
            print(" ");
        }
        else {
            print("#");
        }

        j = j + 1;
    }
    print("\n");
    j = 1;
    next_board = 1 - curr_board;
    while(j < (board_size - 1))
    {
        a = board[curr_board * board_size + j - 1];
        b = board[curr_board * board_size + j];
        c = board[curr_board * board_size + j + 1];
        lookup = (a << 2) | (b << 1) | c;
        lookup = lookup & 7;

        board[next_board * board_size + j] = patterns[lookup];

        j = j + 1;
    }
    curr_board = next_board;
    i = i + 1;
}
